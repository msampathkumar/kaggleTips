# -*- coding: utf-8 -*-
"""
Created on Sat Aug 29 00:03:23 2015

@author: sampathkumar

Description : Exsisting string tokeniserver, labelencode are generating a unique set 
of label as per expected either based on frequencs of labels.

Negitive point, in this traditional method is it fails focus on cost/prediction value/ y - values.

In here we take this oppertunity to map lable in priority to cost/predict/Y

This way we can easily set-up a relation ship between feature and cost-value.
"""
import pandas
import numpy
import matplotlib.pyplot as plt

np = numpy # np, numpy are valid
pd = pandas # pd, pandas are valid

Tutorial = True

class ColumnLabeller():
    def __init__(self):
        self.wiki = dict()
        self.i = 0
    def lablel_mapper(self, key):
        try:
            tmp = self.wiki[key]
            #print (key, tmp)
        except:
            self.wiki[key] = self.i
            self.i += 1
    def fit(self, keys, values ):
        df=pd.core.frame.DataFrame( { 'col1': keys, 'col2' : values } )
        x, y = df.columns
        df = df.sort([y], ascending=[1])
        # @memorise
        def f(x):
            tmp = df[df.col1 == x].col2
            return sum(tmp)/len(tmp)
        for key, val in zip(df[x], df[y]):
            self.lablel_mapper(key)
        print ('\n mapping is completed, we are ready for transform')
    def transform(self, keys):
        dfs =  pd.core.frame.Series(keys)
        dfs = dfs.apply( lambda x : self.wiki[x] )
        return dfs
    def fit_transform(self, keys, values ):
        self.fit( keys, values)
        return SLM.transform( keys)

if Tutorial :
    random_text = 'lqwertyuiopasdfghjqwertyuiopkl;zxcvbnm,./qwertyuiop[]'
    keys = np.array(list(random_text))
    values = np.arange(len(random_text))
    SLM = ColumnLabeller()
    # new = SLM.fit_transform(keys, values)
    df = pandas.core.frame.DataFrame( { 'col1': keys, 'cost' : values, 'smart' : new } )
    
    from sklearn import preprocessing
    lbl_enc = preprocessing.LabelEncoder()
    df['traditional'] = lbl_enc.fit_transform( df.col1)
    
    plt.scatter( df.traditional, df.cost, s=20, c='b', marker='*')
    plt.scatter( df.smart, df.cost, s=20, c='b', marker='o')
    plt.ylabel('priority/cost')
    plt.xlabel('Lables1(LabelEncoder) - (*); Label2(SmartLabelMapper) - (o)')
    plt.title('new -v- traditional')
    df.plot()
